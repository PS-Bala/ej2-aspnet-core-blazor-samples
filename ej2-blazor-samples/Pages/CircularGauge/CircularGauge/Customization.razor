@page "/CircularGauge/Customization"

@using Syncfusion.EJ2.RazorComponents.CircularGauge

@*Hidden:Lines*@
@using ej2_blazor_samples
@{
    SampleBrowser.CurrentSampleName = "Gauge Customization";
    SampleBrowser.CurrentControlName = "CircularGauge";
    SampleBrowser.CurrentControlCategory = "CircularGauge";
    SampleBrowser.CurrentControl = SampleBrowser.Config.CircularGauge;
    SampleBrowser.ActionDescription = new string[] {
        @" <p>
            This sample illustrates how to customize the gauge with pointers. Here color and types of the pointers are customized.
        </p>"
    };
    SampleBrowser.Description = new string[] {
        @"<p>
            In this example, you can see how to customize the gauge elements such as <code> pointers </code> and <code> range </code>. Here a needle and range bar are added to show the current value and its appearance can be customized here.
        </p>
        <p>
            More information on the range and pointer customization can be found in this
            <a target=""_blank"" href=""http://ej2.syncfusion.com/documentation"">documentation section</a>.
        </p>"
    };
}
@*End:Hidden*@

<div class="control-section">
    <EjsCircularGauge ID="gauge" >
        <CircularGaugeAxes>
            <CircularGaugeAxis StartAngle="300" EndAngle="60" Minimum="999" Maximum="2000" Radius="80%"  >  
                    <CircularGaugeAxisLineStyle Width="0.01">
                        </CircularGaugeAxisLineStyle>          
                        <CircularGaugeAxisMajorTicks Width="0.01">
                        </CircularGaugeAxisMajorTicks>
                        <CircularGaugeAxisMinorTicks Width="0.01">
                        </CircularGaugeAxisMinorTicks>
                        <CircularGaugeLabel Font="@Font">
                    </CircularGaugeLabel>
                    <CircularGaugePointers>
                            <CircularGaugePointer  Type="PointerType.RangeBar" Value=1800 Radius="90%" Color="#FFDD00" PointerWidth="30">                
                                <CircularGaugeAnimation Enable="false" Duration="0" >
                                </CircularGaugeAnimation>
                            </CircularGaugePointer>
                            <CircularGaugePointer  Value=1800 Radius="90%" Color="#424242" PointerWidth="9">                
                                <CircularGaugeAnimation Enable="false" Duration="0" >
                                </CircularGaugeAnimation>
                                <CircularGaugeCap Radius="10" Color="#424242">
                                    <CircularGaugeCapBorder Width="0">
                                    </CircularGaugeCapBorder>
                                </CircularGaugeCap>
                            </CircularGaugePointer>
                            <CircularGaugeRanges>
                                <CircularGaugeRange  Start="1000" End="2000" Radius="90%" StartWidth="30" EndWidth="30" Color="#E0E0E0">
                                </CircularGaugeRange>
                            </CircularGaugeRanges>
                    </CircularGaugePointers>
                    <CircularGaugeAnnotations>
                        <CircularGaugeAnnotation content="<div style='color:#666666;font-size:35px;'>1800</div>" Angle="0" Radius="110%" ZIndex="1">
                        </CircularGaugeAnnotation>
                    </CircularGaugeAnnotations>
                </CircularGaugeAxis>
        </CircularGaugeAxes>
</EjsCircularGauge>
</div>

@code {
    public class font
    {
        public String size { get; set; }
    }
    public font Font = new font{
        size = "0px"
    };
}